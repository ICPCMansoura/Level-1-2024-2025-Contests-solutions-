#include <iostream>
#include <vector>
#include <bitset>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <string>
#include <cmath>
#include <iomanip>
#include <unordered_map>
#include<numeric>
using namespace std;
#define int long long
#define endl '\n'
const int mod = 1e9 + 7, N = 1e5 + 5;
vector<vector<int>>adj;
vector<int>vis;
int getDivisors(int n) {    // O(sqrt(n))
	int sum = 0;
	for (int i = 1; i * i <= n; i++) {
		if (n % i == 0) {
			sum += i;
			if (i != 1 && i * i != n) sum += n / i;
		}
	}
	return sum;
}
double epsilon = 1e-6;
vector<char> operations = { '+', '-', '*', '/' };
double M;

bool solve(vector<double>& a)
{
	if (a.size() == 1)
	{
		return abs(a[0] - M) <= epsilon;
	}
	for (int i = 0; i < a.size(); i++)
	{
		for (int j = 0; j < a.size(); j++)
		{
			if (i == j) continue;
			vector<double>newA;
			for (int k = 0; k < a.size(); k++)
			{
				if (k != i && k != j)
				{
					newA.push_back(a[k]);
				}
			}

			for (auto op : operations)
			{
				if (op == '/' && a[j] == 0) continue;
				if (op == '+')
				{
					newA.push_back(a[i] + a[j]);
				}
				else if (op == '-')
				{
					newA.push_back(a[i] - a[j]);
				}
				else if (op == '*')
				{
					newA.push_back(a[i] * a[j]);
				}
				else if (op == '/')
				{
					newA.push_back(a[i] / a[j]);
				}
				if (solve(newA)) return true;
				newA.pop_back();
			}
		}
	}
	return false;
}


int32_t main() {
    ios::sync_with_stdio(false); cin.tie(0);
    int t = 1; //cin >> t;
    while (t--)
    {
		int n, m;
		cin >> n >> m;
		vector<double>a(n);
		for (int i = 0; i < n; i++)
		{
			int x;
			cin >> x;
			a[i] = x * 1.0;
		}
		M = m * 1.0;
		cout << (solve(a) ? "Yes" : "No");

    }
    return 0;
}