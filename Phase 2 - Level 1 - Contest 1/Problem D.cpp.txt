#include <iostream>
#include <vector>
#include <bitset>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <string>
#include <cmath>
#include <iomanip>
#include <unordered_map>
#include<numeric>
using namespace std;
#define int long long
#define endl '\n'
const int mod = 1e9 + 7, N = 1e5 + 5;
vector<vector<int>>adj;
vector<int>vis;
int getDivisors(int n) {    // O(sqrt(n))
	int sum = 0;
	for (int i = 1; i * i <= n; i++) {
		if (n % i == 0) {
			sum += i;
			if (i != 1 && i * i != n) sum += n / i;
		}
	}
	return sum;
}
double epsilon = 1e-6;
vector<char> operations = { '+', '-', '*', '/' };
double M;


int32_t main() {
    ios::sync_with_stdio(false); cin.tie(0);
    int t = 1; cin >> t;
    while (t--)
    {
		int n;
		cin >> n;
		vector<int>a(n),b(n);
		for (int i = 0; i < n; i++)
		{
			cin >> a[i];
		}
		for (int i = 0; i < n; i++)
		{
			cin >> b[i];
		}
		for (int i = 0; i < n; i++)
		{
			cout << *lower_bound(b.begin(), b.end(), a[i]) - a[i] << " ";
		}

		vector<int>ans(n);
		deque<int>l;
		int ptr = n - 1;
		for (int i = n-1; i >= 0; i--)
		{
			while (ptr >= 0 && b[ptr] >= a[i])
			{
				l.push_front(b[ptr]);
				ptr--;
			}
			ans[i] = l.back() - a[i];

			int x = n - i , y = n- (ptr+1);
			if (x == y)
			{
				l.clear();
			}
		}
		cout << endl;
		for (int i = 0; i < n; i++)
		{
			cout << ans[i] << " ";
		}
		cout << endl;

    }
    return 0;
}