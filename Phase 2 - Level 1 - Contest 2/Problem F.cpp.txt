#include <bits/stdc++.h>
using namespace std;
#define endl '\n'
 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
 
#define ordered_set tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update>
#define ordered_set2 tree<int, null_type, greater_equal<int>, rb_tree_tag, tree_order_statistics_node_update>
 
 
#define int long long
#define ll long long
#define all(x) x.begin(), x.end()
 
#define fast ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);



int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};


string s;
int n;

bool zeros(int loc){
    for(int i = loc; i < n; i++){
        if(s[i] != '0' && s[i] != '.'){
            return false;
        }
    }
    return true;
}

void solve() {
    cin >> s;

    n = s.length();
    bool point = 0;
    int point_loc;

    for(int i = 0; i < n; i++){
        if(s[i] == '.'){
            point = 1;
            point_loc = i;
            break;
        }
    }

    int first_loc = -1;
    for(int i = 0; i < n; i++){
        if(s[i] != '0' && s[i] != '.'){
            first_loc = i;
            break;
        }
    }
    if(first_loc == -1){
        cout << 0;
        return;
    }

    string x = "";
    int y = 0;
    x = s[first_loc];

    if(!point){
        if(zeros(first_loc+1)){
            y = n - first_loc - 1;
        }
        else{
            x += '.';
            for(int i = first_loc+1; i < n; i++){
                x += s[i];
            }
            y = n - first_loc - 1;
        }
    }
    else{
        if(first_loc > point_loc){
            if(zeros(first_loc+1)){
                y = point_loc - first_loc;
            }
            else{
                x += '.';
                for(int i = first_loc+1; i < n; i++){
                    x += s[i];
                }
                y = point_loc - first_loc;
            }
        }
        else{
            if(zeros(first_loc+1)){
                y = point_loc - first_loc - 1;
            }
            else{
                x += '.';
                for(int i = first_loc+1; i < n; i++){
                    if(s[i] != '.'){
                        x += s[i];
                    }
                    y = point_loc - first_loc - 1;
                }
            }
        }
    }
    reverse(all(x));
    for(int i = 0; i < x.size(); i++){
        if(x[i] != '0'){
            x = x.substr(i);
            break;
        }
    }
    reverse(all(x));

    if(y != 0){
        cout << x << "E" << y;
    }
    else{
        cout << x;
    }
}

signed main() {
    fast
    int T = 1;
    //cin >> T;
    while(T--){
        solve();

    }
    return 0;
}