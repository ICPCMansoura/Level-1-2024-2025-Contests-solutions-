#include <bits/stdc++.h>
using namespace std;
#define endl '\n'
 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
 
#define ordered_set tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update>
#define ordered_set2 tree<int, null_type, greater_equal<int>, rb_tree_tag, tree_order_statistics_node_update>
 
 
#define int long long
#define ll long long
#define all(x) x.begin(), x.end()
 
#define fast ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);



int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};

int x, y, a, b;
bool can(int mid){
    int l = 0, r = mid, u, v;
    while(l <= r){
        u = l + (r - l) / 2;
        v = mid - u;

        if((u * a + v * b <= x) && (u * b + v * a) <= y){
            return true;
        }
        if((u * a + v * b > x)){
            r = u - 1;
        }
        else{
            l = u + 1;
        }
    }
    return false;
}

void solve() {
    cin >> x >> y >> a >> b;
    if(a < b){
        swap(a, b);
    }
    if(x < y){
        swap(x, y);
    }
    int l = 0, r = 1e9, mid, ans;

    while(l <= r){
        mid = l + (r - l) / 2;
        if(can(mid)){
            ans = mid;
            l = mid + 1;
        }
        else{
            r = mid - 1;
        }
    }

    cout << ans << endl;
}

signed main() {
    fast
    int T = 1;
    cin >> T;
    while(T--){
        solve();

    }
    return 0;
}